package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.database.DatabaseUtils;
import ru.itmo.wp.model.domain.Entity;
import ru.itmo.wp.model.domain.Event;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.BasicRepository;

import javax.sql.DataSource;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public abstract class BasicRepositoryImpl<T extends Entity> implements BasicRepository<T> {
	protected final DataSource DATA_SOURCE = DatabaseUtils.getDataSource();

	@Override
	public T find(long id) {
		try (Connection connection = DATA_SOURCE.getConnection()) {
			try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + getTableName() + " WHERE id=?")) {
				statement.setLong(1, id);
				try (ResultSet resultSet = statement.executeQuery()) {
					return toEntity(statement.getMetaData(), resultSet);
				}
			}
		} catch (SQLException e) {
			throw new RepositoryException("Can't find " + getTableName(), e);
		}
	}

	@Override
	public T findBy(String query, Object... parameters) {
		try (Connection connection = DATA_SOURCE.getConnection()) {
			try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + getTableName() + " " + query)) {
				setParameters(statement, parameters);
				try (ResultSet resultSet = statement.executeQuery()) {
					return toEntity(statement.getMetaData(), resultSet);
				}
			}
		} catch (SQLException e) {
			throw new RepositoryException("Can't find " + getTableName(), e);
		}
	}

	@Override
	public List<T> findAllBy(String query, Object... parameters) {
		List<T> entities = new ArrayList<>();
		try (Connection connection = DATA_SOURCE.getConnection()) {
			try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM " + getTableName() + " " + query)) {
				setParameters(statement, parameters);
				try (ResultSet resultSet = statement.executeQuery()) {
					T entity;
					while ((entity = toEntity(statement.getMetaData(), resultSet)) != null) {
						entities.add(entity);
					}
				}
			}
		} catch (SQLException e) {
			throw new RepositoryException("Can't find " + getTableName(), e);
		}
		return entities;
	}


	@Override
	public List<T> findAll() {
		List<T> entities = new ArrayList<>();
		try (Connection connection = DATA_SOURCE.getConnection()) {
			try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM "  + getTableName() + " ORDER BY id DESC")) {
				try (ResultSet resultSet = statement.executeQuery()) {
					T entity;
					while ((entity = toEntity(statement.getMetaData(), resultSet)) != null) {
						entities.add(entity);
					}
				}
			}
		} catch (SQLException e) {
			throw new RepositoryException("Can't find " + getTableName(), e);
		}
		return entities;
	}

	@SuppressWarnings("SqlSourceToSinkFlow")
	@Override
	public void save(String query, Entity entity, Object... parameters) {
		try (Connection connection = DATA_SOURCE.getConnection()) {
			try (PreparedStatement statement = connection.prepareStatement(
					query,
					Statement.RETURN_GENERATED_KEYS)) {
				setParameters(statement, parameters);
				if (statement.executeUpdate() != 1) {
					throw new RepositoryException("Can't save " + getTableName());
				} else {
					ResultSet generatedKeys = statement.getGeneratedKeys();
					try {
						if (generatedKeys.next()) {
							entity.setId(generatedKeys.getLong(1));
							entity.setCreationTime(find(entity.getId()).getCreationTime());
						} else {
							throw new RepositoryException("Can't save Event [no autogenerated fields].");
						}
					} catch (SQLException e) {
						throw new RuntimeException("Can't save Event.", e);
					}
				}
			}
		} catch (SQLException e) {
			throw new RepositoryException("Can't save " + getTableName(), e);
		}
	}

	public void changeField(String query, Object field, Object parameter) {
		try (Connection connection = DATA_SOURCE.getConnection()) {
			try (PreparedStatement statement = connection.prepareStatement(query)) {
				setParameters(statement, field, parameter);
				if (statement.executeUpdate() != 1) {
					throw new RepositoryException("Can't save " + getTableName());
				}
			}
		} catch (SQLException e) {
			throw new RepositoryException("Can't find " + getTableName(), e);
		}
	}

	public void setParameters(PreparedStatement statement, Object... parameters) throws SQLException {
		for (int i = 0; i < parameters.length; i++) {
			if (parameters[i] instanceof Long) {
				statement.setLong(i + 1, (Long) parameters[i]);
			} else if (parameters[i] instanceof String) {
				statement.setString(i + 1, (String) parameters[i]);
			} else if (parameters[i] instanceof Event.Type) {
				statement.setString(i + 1, parameters[i].toString());
			} else if (parameters[i] instanceof  Boolean) {
				statement.setBoolean(i + 1, ((Boolean) parameters[i]));
			}
		}
	}
}
